-- Enable UUID extension if not already enabled
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Function to automatically update 'updated_at' timestamp (if not already created)
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Table for AI Context Entries
CREATE TABLE public.ai_context_entries (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES public.profiles(user_id) ON DELETE CASCADE, -- The user this context primarily relates to (often the patient)
    related_patient_user_id UUID REFERENCES public.profiles(user_id) ON DELETE SET NULL, -- If context is about a patient, but generated by/for a caregiver
    context_type TEXT NOT NULL, -- e.g., 'medication_summary', 'behavior_pattern', 'preference', 'daily_routine'
    context_data JSONB NOT NULL, -- The actual summarized or structured data for the AI
    source_entity_id UUID, -- Optional: ID of the record this context was derived from (e.g., a patient_note ID, an appointment ID)
    source_table_name TEXT, -- Optional: Name of the table this context was derived from (e.g., 'patient_notes', 'appointments')
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TRIGGER ai_context_entries_updated_at_trigger
BEFORE UPDATE ON public.ai_context_entries
FOR EACH ROW
EXECUTE FUNCTION public.update_updated_at_column();

ALTER TABLE public.ai_context_entries ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage context entries related to them"
ON public.ai_context_entries FOR ALL
USING (auth.uid() = user_id OR auth.uid() = related_patient_user_id);
-- Add more specific caregiver policies based on caregiver_patient_links if needed

-- Indexes
CREATE INDEX idx_ai_context_entries_user_id ON public.ai_context_entries(user_id);
CREATE INDEX idx_ai_context_entries_related_patient_id ON public.ai_context_entries(related_patient_user_id);
CREATE INDEX idx_ai_context_entries_context_type ON public.ai_context_entries(context_type);
-- Consider GIN index on context_data if querying its content frequently
-- CREATE INDEX idx_ai_context_entries_context_data_gin ON public.ai_context_entries USING GIN (context_data);
